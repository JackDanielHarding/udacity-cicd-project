version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3     
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Install dependencies
          working_directory: ./frontend
          command: npm i
      - run:
          name: Build front-end
          command: npm run build
          working_directory: ./frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Install dependencies
          working_directory: ./backend
          command: npm i
      - run:
          name: Back-end build
          command: npm run build
          working_directory: ./backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frontend tests
          working_directory: ./frontend
          command: npm run test
                
  test-backend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend tests
          working_directory: ./backend
          command: npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Analyse frontend
          working_directory: ./frontend
          command: npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Analyse backend
          working_directory: ./backend
          command: npm audit --audit-level=none # I had to remove the --audit-level=critical flag because when running the npm audit fix --audit-level=critical --force from the instructions, it introduces a breaking change to one of the dependencies

  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: admin
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-cicd-project \
              --stack-name udacity-cicd-backend-$CIRCLE_WORKFLOW_ID \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-cicd-project \
              --stack-name udacity-cicd-frontend-$CIRCLE_WORKFLOW_ID \
              --parameter-overrides ID=$CIRCLE_WORKFLOW_ID
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-cicd-project" \
              --output text >> temp.txt
      - run:
          name: Store IP address for future ise
          command: |
            cat temp.txt >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: dbaf9a52-741b-439d-917f-ec5c4a7702bc" --request PUT --data $(cat temp.txt) https://api.memstash.io/values/backend_ip_$CIRCLE_WORKFLOW_ID
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["47:4b:47:ac:23:66:25:f2:8c:d9:50:37:e3:87:c6:a2"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
              npm run migrations > migration-output.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep --quiet "has been executed successfully" migration-output.txt; then 
              curl -H "Content-Type: text/plain" -H "token: dbaf9a52-741b-439d-917f-ec5c4a7702bc" --request PUT --data "1" https://api.memstash.io/values/migration_$CIRCLE_WORKFLOW_ID 
            fi
            
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: admin
      - checkout 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(curl -H "token: dbaf9a52-741b-439d-917f-ec5c4a7702bc" --request GET https://api.memstash.io/values/backend_ip_$CIRCLE_WORKFLOW_ID)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run: 
          name: Install dependencies
          working_directory: ./frontend
          command: npm i
      - run:
          name: Build front-end
          command: npm run build
          working_directory: ./frontend
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist s3://udapeople-$CIRCLE_WORKFLOW_ID --recursive
      # Here's where you will add some code to rollback on failure    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - main
                - feature/add-deploy-frontend
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]